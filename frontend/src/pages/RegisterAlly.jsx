import React, { useState } from 'react';
import '../styles/RegisterAlly.css';
import TableSelect from '../components/TableSelect';
import aliadoImg from '../assets/aliado.jpg';

  function RegisterAlly({ onRegistrationSuccess }) {
  const [tipoPersona, setTipoPersona] = useState('');
  const [step, setStep] = useState(1);

  const [formData, setFormData] = useState({});
  const [apoyosSeleccionados, setApoyosSeleccionados] = useState([]);
  const [needsData, setNeedsData] = useState({
    formacionDocente: [],
    formacionFamilias: [],
    formacionNi√±os: [],
    personalApoyo: [],
    infraestructura: [],
    materiales: [],
    mobiliario: [],
    alimentacion: [],
    transporte: [],
    juridico: []
  });
  

  const handleChange = (e) => {
    setTipoPersona(e.target.value);
  };
  const handleInput = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };
  const agregarApoyo = (categoria, seleccionados) => {
    const nuevos = seleccionados.map(desc => ({
      tipo: categoria,
      caracteristicas: desc
    }));
    setApoyosSeleccionados(prev => [
      ...prev.filter(a => a.tipo !== categoria), // Elimina selecciones anteriores de la misma categor√≠a
      ...nuevos
    ]);
  };
  

  const handleContinue = () => {
    if (tipoPersona) {
      setStep(2);
    }
  };
  const enviarFormulario = async () => {
    const datos = {
      usuario: {
        correoElectronico: formData.correo,
        contrase√±a: formData.contrase√±a,
        nombre: tipoPersona === "moral" ? formData.nombreOrg : formData.nombre,      
      },
      aliado: {
        tipoDeApoyo: formData.tipoApoyo,
        tipoId: tipoPersona === "fisica" ? formData.curp : formData.rfc
      },
      personaFisica: tipoPersona === "fisica" ? {
        CURP: formData.curp,
        institucionLaboral: formData.institucionLaboral,
        razon: formData.razon,
        correoElectronico: formData.correo,
        telefono: formData.telefono
      } : undefined,
      personaMoral: tipoPersona === "moral" ? {
        RFC: formData.rfc,
        numeroEscritura: formData.numeroEscritura,
        area: formData.representanteArea,
        correoElectronico: formData.representanteCorreo, 
        telefono: formData.telefono 
      } : undefined,
      institucion: tipoPersona === "moral" ? {
        giro: formData.giro,
        propositoOrganizacion: formData.proposito,
        domicilio: formData.domicilioInstitucion,
        telefono: formData.telefono,
        paginaWeb: formData.paginaWeb,
        RFC: formData.rfc
      } : undefined,
      escrituraPublica: tipoPersona === "moral" ? {
        numeroEscritura: formData.numeroEscritura,
        fechaEscritura: formData.fechaEscritura,
        otorgadaNotario: formData.otorgadaPor,
        ciudad: formData.ciudad,
        RFC: formData.rfc
      } : undefined,
      constanciaFiscal: tipoPersona === "moral" ? {
        RFC: formData.rfc,
        razonSocial: formData.razonSocial,
        regimen: formData.regimen,
        domicilio: formData.domicilioFiscal
      } : undefined,
      representanteLegal: tipoPersona === "moral" ? {
        nombre: formData.representanteNombre,
        correo: formData.representanteCorreo,
        telefono: formData.representanteTelefono,
        area: formData.representanteArea,
        RFC: formData.rfc
      } : undefined,      
      apoyos: apoyosSeleccionados
    };
    console.log('üì¶ Enviando datos:', JSON.stringify(datos, null, 2));

    try {
      const res = await fetch('http://localhost:5000/api/aliado', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(datos)
      });
    
      const text = await res.text(); // ‚Üê lee como texto sin asumir que es JSON
      console.log('üßæ Respuesta cruda:', text);
    
      try {
        const json = JSON.parse(text);
        console.log('‚úÖ JSON parseado:', json);
        alert(json.message);
        setTimeout(() => {
          if (onRegistrationSuccess) {
            onRegistrationSuccess(); // üëâ redirige al componente de √©xito
          }
        }, 100);        
      } catch (err) {
        console.error('‚ùå No es JSON v√°lido:', err);
        alert('Respuesta no v√°lida:\n' + text);
      }
    
    } catch (error) {
      console.error('‚ùå Error de red:', error);
      alert('Error de red:\n' + error.message);
    }
  };    
  const formacionDocente = [
    "Convivencia escolar / Cultura de paz / Valores",
    "Educaci√≥n inclusiva",
    "Ense√±anza de lectura y matem√°ticas",
    "Inteligencia emocional",
    "Lectoescritura",
    "Atenci√≥n de estudiantes con BAP (Barreras para el aprendizaje y la participaci√≥n)",
    "Evaluaci√≥n",
    "Herramientas digitales para la educaci√≥n / Innovaci√≥n tecnol√≥gica",
    "Proyecto de vida / Expectativas a futuro / Orientaci√≥n vocacional",
    "Liderazgo y habilidades directivas",
    "Nueva Escuela Mexicana",
    "Disciplina positiva",
    "Metodolog√≠as activas (ejemplo: aprendizaje basado en proyectos, en problemas, en el juego, en servicio, gamificaci√≥n, etc.)",
    "Alimentaci√≥n saludable",
    "Participaci√≥n infantil",
    "Comunicaci√≥n efectiva con comunidad escolar",
    "Comunidades de aprendizaje",
    "Neuroeducaci√≥n",
    "Sexualidad"
];

const formacionFamilias= [
    "Crianza positiva",
    "Derechos y obligaciones de los padres",
    "Inteligencia emocional",
    "Atenci√≥n para hijos con BAP (Barreras para el aprendizaje y la participaci√≥n)",
    "Proyecto de vida /Expectativas a futuro/ Orientaci√≥n vocacional",
    "Cultura de paz / Valores en el hogar",
    "Alimentaci√≥n saludable",
    "Sexualidad",
    "Ense√±anza de lectura y matem√°ticas",
    "Comunicaci√≥n efectiva con escuela",
    "Nueva Escuela Mexicana"
];

const formacionNi√±os= [
    "Lectoescritura",
    "Convivencia escolar/ Cultura de paz / Valores",
    "Ense√±anza de matem√°ticas",
    "Educaci√≥n f√≠sica",
    "Inteligencia emocional",
    "Proyecto de vida /Expectativas a futuro/ Orientaci√≥n vocacional",
    "Sexualidad",
    "Alimentaci√≥n saludable",
    "Arte",
    "M√∫sica",
    "Computaci√≥n",
    "Visitas fuera de la escuela (a empresas o lugares recreativos)"
];

const personalApoyo= [
    "Psic√≥logo",
    "Psicopedagogo o especialista en BAP",
    "Suplentes de docentes frente a grupo",
    "Maestro para clases de educaci√≥n f√≠sica",
    "Terapeuta de lenguaje o comunicaci√≥n",
    "Maestro para clases de arte",
    "Persona para apoyo en limpieza",
    "Maestro para clases de idiomas",
    "Persona para apoyo administrativo"
];

const infraestructura= [
    "Agua (falla de agua, filtros de agua, bomba de agua nueva,tinaco o cisterna nueva, bebederos, etc.)",
    "Luz (fallo el√©ctrico, conexi√≥n de luz, focos y cableado nuevo, paneles solares, etc.)",
    "Suplentes de docentes frente a grupo",
    "Muros, techos o pisos (reconstrucci√≥n de muros cuarteados, tablaroca, plaf√≥n, cambio de pisos levantados,etc.)",
    "Adecuaciones para personas con discapacidad (rampas, etc.)",
    "Ba√±os (arreglo de ba√±os, cambio de sanitarios o lavamanos,construcci√≥n de ba√±os, plomer√≠a, etc.)",
    "Cocina (construcci√≥n, remodelaci√≥n de cocina)",
    "Conectividad (routers, instalaci√≥n de internet, etc.)",
    "Domos y patios (estructura para domo, lonaria y/o malla sombra, nivelaci√≥n de patio, plancha de concreto, etc.)",
    "√Årboles (plantar nuevos, poda de √°rboles, arreglo de o nuevas jardineras)",
    "Pintura",
    "Seguridad (construcci√≥n o arreglo de barda perimetral, c√°maras de seguridad, alambrado, cambio de barandales en mal estado, etc.)",
    "Ventanas y puertas (ventanas y puertas nuevas, protecci√≥n para ventanas, candados para puertas)"
];

const materiales=[
    "Tecnol√≥gico (computadoras, impresoras, proyectores, pantallas, bocinas, extensiones, cables HDMI, etc.)",
    "Did√°cticos (plastilina, cartulinas, hojas, marcadores, crayolas, l√°pices, colores, juegos para aprender fracciones, multiplicaciones, regletas, rompecabezas, geoplanos, bloques geom√©tricos, billetes de juego, alimentos de juego, microscopio, etc.)",
    "De educaci√≥n f√≠sica (sogas, pelotas, aros, tinas, balones, porter√≠as, redes para canastas o para voleibol, etc.)",
    "Literarios (libros infantiles, manuales, libros de texto, libros en braille, libros macrotipo, libros para estudiantes de lengua ind√≠gena, programas de estudio, etc.)"
];

const mobiliario=[
    "Mesas para ni√±os/ mesabancos",
    "Sillas (para ni√±os o para maestros)",
    "Mesas para docentes",
    "Pizarrones",
    "Comedores",
    "Estantes, libreros o cajoneras"
];

const alimentacion=[
    "Desayunos",
    "F√≥rmula"
];

const transporte=[
    "Transporte (nuevas rutas de camiones, transporte escolar,entrega de bicis, etc.)",
    "Arreglo de camino (puentes en arroyos, aplanadora de camino, luminaria, etc.)"
];

const juridico=[
    "Apoyo en gesti√≥n de escrituras (cuando el inmueble no las tiene)"
];

  return (
    <div className="register-container">
      <div className="image-section">
        <img src={aliadoImg} alt="Aliado foto" />
      </div>
      <div className="form-section">
        <h1 className="title">Registrarme como aliado</h1>

        {step === 1 && (
          <>
            <p className="question">
              ANTES DE CONTINUAR,<br />¬øERES UNA PERSONA F√çSICA O MORAL?
            </p>
            <select className="selector" value={tipoPersona} onChange={handleChange}>
              <option value="">seleccionar</option>
              <option value="fisica">Persona f√≠sica</option>
              <option value="moral">Persona moral</option>
            </select>
            <button className="continue-button" onClick={handleContinue}>
              CONTINUAR
            </button>
          </>
        )}
{step === 2 && tipoPersona === 'fisica' && (
  <>
    <p className="label">Persona f√≠sica</p>
    <div className="scroll">
      <form className="form-grid">
        <div className="form-group">
          <label>Correo</label>
          <input className="form-input" type="text" name="correo" onChange={handleInput} />
        </div>
        <div className="form-group">
          <label>Contrase√±a</label>
          <input className="form-input" type="text" name="contrase√±a" onChange={handleInput} />
        </div>
        <div className="form-group">
          <label>Nombre completo</label>
          <input className="form-input" type="text" name="nombre" onChange={handleInput} />
        </div>
        <div className="form-group">
          <label>N√∫mero telef√≥nico</label>
          <input className="form-input" type="text" name="telefono" onChange={handleInput} />
        </div>
        <div className="form-group">
          <label>Correo electr√≥nico</label>
          <input className="form-input" type="email" name="correo" onChange={handleInput} />
        </div>
        <div className="form-group">
          <label>Tipo de apoyo a brindar</label>
          <input className="form-input" type="text" name="tipoApoyo" onChange={handleInput} />
        </div>
        <div className="form-group">
          <label>CURP</label>
          <input className="form-input" type="text" name="curp" onChange={handleInput} />
        </div>
        <div className="form-group">
          <label>Instituci√≥n donde labora</label>
          <input className="form-input" type="text" name="institucionLaboral" onChange={handleInput} />
        </div>
        <div className="form-group">
          <label>Raz√≥n por la que se inscribe</label>
          <input className="form-input" type="text" name="razon" onChange={handleInput} />
        </div>
      </form>
              <div className="heading-need">REGISTRA TU APOYO</div>
              <p className='label'>Selecciona en qu√© necesidades podr√≠as apoyar</p> 
              <TableSelect
                title="Formaci√≥n Docente"
                needs={formacionDocente}
                selectedNeeds={needsData.formacionDocente}
                onChange={(selected) => {
                  setNeedsData(prev => ({ ...prev, formacionDocente: selected }));
                  agregarApoyo("Formaci√≥n Docente", selected);
                }}
              />
              <TableSelect
                title="Formaci√≥n a familias"
                needs={formacionFamilias}
                selectedNeeds={needsData.formacionFamilias}
                onChange={(selected) => {
                  setNeedsData(prev => ({ ...prev, formacionFamilias: selected }));
                  agregarApoyo("Formaci√≥n a familias", selected);
                }}
              />
              <TableSelect
                title="Formaci√≥n ni√±as y ni√±os"
                needs={formacionNi√±os}
                selectedNeeds={needsData.formacionNi√±os}
                onChange={(selected) => {
                  setNeedsData(prev => ({ ...prev, formacionNi√±os: selected }));
                  agregarApoyo("Formaci√≥n ni√±as y ni√±os", selected);
                }}
              />
              <TableSelect
                title="Personal de apoyo"
                needs={personalApoyo}
                selectedNeeds={needsData.personalApoyo}
                onChange={(selected) => {
                  setNeedsData(prev => ({ ...prev, personalApoyo: selected }));
                  agregarApoyo("Personal de apoyo", selected);
                }}
              />
              <TableSelect
                title="Infraestructura"
                needs={infraestructura}
                selectedNeeds={needsData.infraestructura}
                onChange={(selected) => {
                  setNeedsData(prev => ({ ...prev, infraestructura: selected }));
                  agregarApoyo("Infraestructura", selected);
                }}
              />
              <TableSelect
                title="Materiales"
                needs={materiales}
                selectedNeeds={needsData.materiales}
                onChange={(selected) => {
                  setNeedsData(prev => ({ ...prev, materiales: selected }));
                  agregarApoyo("Materiales", selected);
                }}
              />
              <TableSelect
                title="Mobiliario"
                needs={mobiliario}
                selectedNeeds={needsData.mobiliario}
                onChange={(selected) => {
                  setNeedsData(prev => ({ ...prev, mobiliario: selected }));
                  agregarApoyo("Mobiliario", selected);
                }}
              />
              <TableSelect
                title="Alimentaci√≥n"
                needs={alimentacion}
                selectedNeeds={needsData.alimentacion}
                onChange={(selected) => {
                  setNeedsData(prev => ({ ...prev, alimentacion: selected }));
                  agregarApoyo("Alimentaci√≥n", selected);
                }}
              />
              <TableSelect
                title="Transporte"
                needs={transporte}
                selectedNeeds={needsData.transporte}
                onChange={(selected) => {
                  setNeedsData(prev => ({ ...prev, transporte: selected }));
                  agregarApoyo("Transporte", selected);
                }}
              />
              <TableSelect
                title="Jur√≠dico"
                needs={juridico}
                selectedNeeds={needsData.juridico}
                onChange={(selected) => {
                  setNeedsData(prev => ({ ...prev, juridico: selected }));
                  agregarApoyo("Jur√≠dico", selected);
                }}
              />

            </div>
            <button className="continue-button" onClick={enviarFormulario}>CONTINUAR</button>          </>
        )}
        {step === 2 && tipoPersona === 'moral' && (
          <>
            <p className="label">Persona moral</p>
            <div className="scroll">
            <form className="form-grid">
                <div className="form-group">
                    <label>Correo</label>
                    <input className="form-input" type="text" name="correo" onChange={handleInput} />                </div>
                <div className="form-group">
                    <label>Contrase√±a</label>
                    <input className="form-input" type="text" name="contrase√±a" onChange={handleInput} />                </div>
            </form>
            <div className="heading">DATOS DE LA INSTITUCI√ìN</div>
              <form className="form-grid">
              <div className="form-group">
              <label>RFC (se usar√° para todos los registros)</label>
              <input className="form-input" type="text" name="rfc" onChange={handleInput} />
            </div> 
                <div className="form-group">
                  <label>Nombre de la organizaci√≥n (empresa, OSC, etc)</label>
                  <input className="form-input" type="text" name="nombreOrg" onChange={handleInput} />                </div>
                <div className="form-group">
                  <label>Giro</label>
                  <input className="form-input" type="text" name="giro" onChange={handleInput} />                </div>
                <div className="form-group">
                  <label>Prop√≥sito de la organizaci√≥n</label>
                  <input className="form-input" type="text" name="proposito" onChange={handleInput} />                </div>
                <div className="form-group">
                  <label>Domicilio</label>
                  <input className="form-input" type="text" name="domicilioInstitucion" onChange={handleInput} />                </div>
                <div className="form-group">
                  <label>Tel√©fono</label>
                  <input className="form-input" type="text" name="telefono" onChange={handleInput} />                </div>
                <div className="form-group">
                  <label>P√°gina web oficial</label>
                  <input className="form-input" type="text" name="paginaWeb" onChange={handleInput} />                </div>
              </form>
                <div className="heading">ESCRITURA P√öBLICA</div>
              <form className="form-grid">
                <div className="form-group">
                  <label>N√∫mero de escritura p√∫blica</label>
                  <input className="form-input" type="text" name="numeroEscritura" onChange={handleInput} />                </div>
                <div className="form-group">
                  <label>Fecha de escritura p√∫blica</label>
                  <input className="form-input" type="date" name="fechaEscritura" onChange={handleInput} />                </div>
                <div className="form-group">
                  <label>Otorgada por: (Nombre del notario)</label>
                  <input className="form-input" type="text" name="otorgadaPor" onChange={handleInput} />                </div>
                <div className="form-group">
                  <label>En la ciudad de:</label>
                  <input className="form-input" type="text" name="ciudad" onChange={handleInput} />                </div>
              </form>
              <div className="heading">CONSTANCIA FISCAL</div>
              <form className="form-grid">
                <div className="form-group">
                  <label>RFC</label>
                  <input className="form-input" type="text" name="rfc" onChange={handleInput} />                </div>
                <div className="form-group">
                  <label>Raz√≥n Social</label>
                  <input className="form-input" type="text" name="razonSocial" onChange={handleInput} />                </div>
                <div className="form-group">
                  <label>R√©gimen</label>
                  <input className="form-input" type="text" name="regimen" onChange={handleInput} />                </div>
                <div className="form-group">
                  <label>Domicilio</label>
                  <input className="form-input" type="text" name="domicilioFiscal" onChange={handleInput} />                </div>
              </form>
              <div className="heading">DATOS DEL REPRESENTANTE</div>
              <form className="form-grid">
                <div className="form-group">
                  <label>Nombre completo</label>
                  <input className="form-input" type="text" name="representanteNombre" onChange={handleInput} />               </div>
                <div className="form-group">
                  <label>Correo</label>
                  <input className="form-input" type="text" name="representanteCorreo" onChange={handleInput} />                  </div>
                <div className="form-group">
                  <label>Tel√©fono</label>
                  <input className="form-input" type="text" name="representanteTelefono" onChange={handleInput} />                </div>
                <div className="form-group">
                  <label>√Årea a la que pertenece en la organizaci√≥n</label>
                  <input className="form-input" type="text" name="representanteArea" onChange={handleInput} />                </div>
              </form>
              <div className="form-group">
                  <label>Tipo de apoyo a brindar</label>
                  <input className="form-input" type="text" name="tipoApoyo" onChange={handleInput} />
                </div>
                <div className="heading-need">REGISTRA TU APOYO</div>
                <p className='label'>Selecciona en que necesidades podr√≠as apoyar</p> 
                <TableSelect
                  title="Formaci√≥n Docente"
                  needs={formacionDocente}
                  selectedNeeds={needsData.formacionDocente}
                  onChange={(selected) => {
                    setNeedsData(prev => ({ ...prev, formacionDocente: selected }));
                    agregarApoyo("Formaci√≥n Docente", selected);
                  }}
                />
                <TableSelect
                  title="Formaci√≥n a familias"
                  needs={formacionFamilias}
                  selectedNeeds={needsData.formacionFamilias}
                  onChange={(selected) => {
                    setNeedsData(prev => ({ ...prev, formacionFamilias: selected }));
                    agregarApoyo("Formaci√≥n a familias", selected);
                  }}
                />
                <TableSelect
                  title="Formaci√≥n ni√±as y ni√±os"
                  needs={formacionNi√±os}
                  selectedNeeds={needsData.formacionNi√±os}
                  onChange={(selected) => {
                    setNeedsData(prev => ({ ...prev, formacionNi√±os: selected }));
                    agregarApoyo("Formaci√≥n ni√±as y ni√±os", selected);
                  }}
                />
                <TableSelect
                  title="Personal de apoyo"
                  needs={personalApoyo}
                  selectedNeeds={needsData.personalApoyo}
                  onChange={(selected) => {
                    setNeedsData(prev => ({ ...prev, personalApoyo: selected }));
                    agregarApoyo("Personal de apoyo", selected);
                  }}
                />
                <TableSelect
                  title="Infraestructura"
                  needs={infraestructura}
                  selectedNeeds={needsData.infraestructura}
                  onChange={(selected) => {
                    setNeedsData(prev => ({ ...prev, infraestructura: selected }));
                    agregarApoyo("Infraestructura", selected);
                  }}
                />
                <TableSelect
                  title="Materiales"
                  needs={materiales}
                  selectedNeeds={needsData.materiales}
                  onChange={(selected) => {
                    setNeedsData(prev => ({ ...prev, materiales: selected }));
                    agregarApoyo("Materiales", selected);
                  }}
                />
                <TableSelect
                  title="Mobiliario"
                  needs={mobiliario}
                  selectedNeeds={needsData.mobiliario}
                  onChange={(selected) => {
                    setNeedsData(prev => ({ ...prev, mobiliario: selected }));
                    agregarApoyo("Mobiliario", selected);
                  }}
                />
                <TableSelect
                  title="Alimentaci√≥n"
                  needs={alimentacion}
                  selectedNeeds={needsData.alimentacion}
                  onChange={(selected) => {
                    setNeedsData(prev => ({ ...prev, alimentacion: selected }));
                    agregarApoyo("Alimentaci√≥n", selected);
                  }}
                />
                <TableSelect
                  title="Transporte"
                  needs={transporte}
                  selectedNeeds={needsData.transporte}
                  onChange={(selected) => {
                    setNeedsData(prev => ({ ...prev, transporte: selected }));
                    agregarApoyo("Transporte", selected);
                  }}
                />
                <TableSelect
                  title="Jur√≠dico"
                  needs={juridico}
                  selectedNeeds={needsData.juridico}
                  onChange={(selected) => {
                    setNeedsData(prev => ({ ...prev, juridico: selected }));
                    agregarApoyo("Jur√≠dico", selected);
                  }}
                />

            </div>
            <button className="continue-button" onClick={enviarFormulario}>CONTINUAR</button>          </>
        )}
      </div>
    </div>
  );
}

export default RegisterAlly;